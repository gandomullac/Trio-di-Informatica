	.data
msg1:	.asciiz	"Ci sono state "	# Testo in output 1
msg2:	.asciiz	" occorrenze."		# Testo in output 2

N:	.word 40			# Valore di N	(numero iterazioni)
M:	.word 3				# Valore di M	(numero ricercato)

	.text				# Seguono le linee di codice
MAIN: 
	lw $s0, N			# Carico la word contenente N
	lw $s1, M			# Carico la word contenente M
	li $s2, 0			# Inizializzo la variabile contenente le frequenze
	li $s3, 0			# Inizializzo l'indice
	
	add $a1, $s1, $zero		# Copio il valore di M nel registro degli argomenti
	
loop:
	jal D6				# Chiamata a funzione	
	jal READ_STACK			# Chiamata a funzione
	add $s2, $s2, $v0		# Aggiungo il valore di ritorno della funzione precedente al contatore delle frequenze
	addi $s3, $s3, 1		# Incremento l'indice
	bne $s3, $s0, loop		# Se l'indice è diverso da M, ricomincia il ciclo
	
	add $a2, $s2, $zero		# Copio il numero delle frequenze in un registro degli argomenti

	jal PRINT			# Chiamata a funzione
	
	li $v0, 10			# Predispongo la variabile della chiamata a sistema a 10 -> Termina esecuzione
	syscall				# Chiamata a sistema


D6:
	add $t2, $ra, $zero		# Salvo l'indirizzo della funzione chiamante in una variabile temporanea
	add $t1, $a1, $zero		# Imposto il numero di iterazioni
	li $t0, 0			# Imposto l'indice
	li $a1 6			# Impongo il limite alto per la generazione del numero casuale 
D6_loop:	
	li $v0 42			# Predispongo la variabile della chiamata a sistema a 42 -> random int range
	li $a0 222			# ID di generazione del numero casuale
	syscall				# Ottengo il numero causale in $a0
	
	addi $a0, $a0, 1		# Aggiungo 1 al valore, passando da un intervallo [0;5] ad un intervallo [1;6].
					# Rimango in $a0 poiché è argomento della prossima funzione
	jal PUSH			# Chiamata di funzione
	
	addi $t0, $t0, 1		# Incremento l'indice
	bne $t0, $t1, D6_loop		# Se l'indice è diverso da M, ripeti il loop
	
	jr $t2				# Ritorno alla funzione chiamante
	
	
PUSH:	
	# Ottengo il valore in entrata e lo carico nello stack
	addi $sp,$sp,-4
	sw $a0,($sp)
	
	jr $ra
	
	
READ_STACK:
	# ritorna il numero di volte in cui i tre valori coincidono
	li $v0, 0			# Inizializzo v0
	add $t5, $ra, $zero		# Salvo l'indirizzo della funzione chiamante in una variabile temporanea
	li $t3, 0			# Imposto il contatore

	lw $t0, 0($sp)			# Leggo dallo stack e scrivo in $t0
	lw $t1, 4($sp) 			# Leggo dallo stack e scrivo in $t1
	lw $t2, 8($sp) 			# Leggo dallo stack e scrivo in $t2
	addi $sp, $sp 12 		# Incremento $sp di 12 (spazio per 3 word)

	bne $t0, $t1, exit		# Se il primo dado è diverso dal secondo, salta alla fine del controllo
	bne $t1, $t2, exit		# Se il secondo dado è diverso dal terzo, salta alla fine del controllo
	bne $t2, $t0, exit		# Se il terzo dado è diverso dal primo, sltaa alla fine del controllo
	addi $v0, $v0, 1		# Se i controlli precedenti danno esito positivo, ritorno 1
exit:
	jr $t5				# Ritorno alla funzione chiamante


PRINT:
	la $a0, msg1			# Carico la parola
	li $v0, 4			# Predispongo la variabile della chiamata a sistema a 4 -> Stampa stringa
	syscall				# Chiamata a sistema
	
	add $a0, $a2, $zero		# Salvo M nel registro dell'argomento della syscall
	li $v0, 1			# Predispongo la variabile della chiamata a sistema a 1 -> Stampa intero
	syscall				# Chiamata a sistema
	
	la $a0, msg2			# Carico la parola
	li $v0, 4			# Predispongo la variabile della chiamata a sistema a 4 -> Stampa stringa
	syscall				# Chiamata a sistema
	
	jr $ra				# Ritorno alla funzione chiamante